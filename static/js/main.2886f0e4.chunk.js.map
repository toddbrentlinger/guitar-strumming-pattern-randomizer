{"version":3,"sources":["justin-guitar-header-logo.png","StrumPattern.js","utilities/debounce.js","components/ButtonRipple.js","components/CustomStrumPattern.js","components/SavedStrumPattern.js","components/SavedStrumPatternListElement.js","components/SavedStrumPatternList.js","components/FooterCustom.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StrumPattern","strummingPatternBoolArr","this","strums","isStrumLockedBoolArr","i","strumIndex","selectedBool","first","second","length","every","boolVal","debounce","func","delay","debounceTimer","context","args","arguments","clearTimeout","setTimeout","apply","ButtonRipple","props","debouncedLog","useCallback","container","rippleContainerRef","current","firstChild","removeChild","clearRipples","useRef","className","type","onClick","e","button","currentTarget","pos","getBoundingClientRect","circle","document","createElement","radius","Math","max","clientWidth","clientHeight","style","width","height","left","clientX","top","clientY","classList","add","appendChild","addRipple","onMouseUp","children","ref","Strum","lockedOnClick","icon","locked","faLock","faLockOpen","color","strumOnClick","getStrumValue","strumNum","getStrumDirection","selected","CustomStrumPattern","useState","strummingPattern","currentStrumPattern","setCurrentStrumPattern","Array","fill","lockedStrums","setLockedStrums","strumList","map","strumBool","newLockedStrums","slice","toggleLockedStrum","newStrumPatternBoolArr","toggleStrum","key","strum","Boolean","random","saveStrumPattern","SavedStrum","SavedStrumPattern","strumPattern","SavedStrumPatternListElement","moveListIndexFunc","listIndex","aria-label","faChevronUp","faChevronDown","data-html2canvas-ignore","removeListIndexFunc","faTrashAlt","SavedStrumPatternList","strumPatternList","savedStrumList","onClone","cloneDoc","buttonNodes","getElementsByTagName","visibility","clearListFunc","element","getElementById","opt","margin","filename","html2canvas","onclone","scale","scrollX","scrollY","jsPDF","format","html2pdf","set","from","save","id","FooterCustom","currentYear","Date","getFullYear","getCopyrightString","App","setSavedStrumList","href","src","logo","alt","index","isEqual","window","alert","newSavedStrumList","push","confirm","oldIndex","newIndex","newArr","splice","indexToRemove","location","hostname","match","SAVED_STRUM_PATTERN_LIST","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2886f0e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/justin-guitar-header-logo.df6a356d.png\";","class StrumPattern {\r\n    /**\r\n     * @constructor\r\n     * @param {Boolean[]} strummingPatternBoolArr\r\n     */\r\n    constructor(strummingPatternBoolArr) {\r\n        this.strums = strummingPatternBoolArr;\r\n    }\r\n\r\n    /**\r\n     * Randomizes strumming pattern while keeping selected strums the same.\r\n     * @param {Boolean[]} isStrumLockedBoolArr\r\n     */\r\n    randomize(isStrumLockedBoolArr) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns Number of strum on down strums or String \"+\" for up strums.\r\n     * 1,3,5,7 � correspond to down (D) strums 1,2,3,4\r\n     * 2,4,6,8 � correspond to up (U) strums '+'\r\n     * @param {Number} i\r\n     * @returns {Number|String}\r\n     */\r\n    static getStrumValue(i) {\r\n        return i % 2 ? \"+\" : i / 2 + 1;\r\n    }\r\n\r\n    /**\r\n     * Returns String of \"U\" for up strums or \"D\" for down strums.\r\n     * 1,3,5,7 � correspond to down (D) strums 1,2,3,4\r\n     * 2,4,6,8 � correspond to up (U) strums '+'\r\n     * @param {Number} strumIndex\r\n     * @param {Boolean} selectedBool\r\n     * @returns {String}\r\n     */\r\n    static getStrumDirection(strumIndex, selectedBool = true) {\r\n        return selectedBool\r\n            ? strumIndex % 2 ? \"U\" : \"D\"\r\n            : \"-\";\r\n    }\r\n\r\n    /**\r\n     * Returns true if both StrummingPattern objects are equal, else returns false.\r\n     * @param {StrummingPattern} first\r\n     * @param {StrummingPattern} second\r\n     */\r\n    static isEqual(first, second) {\r\n        // Compare array lengths\r\n        if (first.strums.length !== second.strums.length)\r\n            return false;\r\n\r\n        // Compare each array index value\r\n        return first.strums.every(\r\n            (boolVal, i) => boolVal === second.strums[i]\r\n        );\r\n    }\r\n}\r\n\r\nexport default StrumPattern;","\r\nconst debounce = (func, delay) => {\r\n    let debounceTimer;\r\n    return function () {\r\n        const context = this;\r\n        const args = arguments;\r\n        clearTimeout(debounceTimer);\r\n        debounceTimer = setTimeout(() => func.apply(context, args)\r\n            , delay);\r\n    };\r\n};\r\n\r\nexport default debounce;","import React, { useCallback, useRef } from 'react';\r\nimport './ButtonRipple.css';\r\nimport debounce from '../utilities/debounce.js';\r\n\r\nfunction ButtonRipple(props) {\r\n    const debouncedLog = useCallback(\r\n        debounce(function () {\r\n            //console.log(\"Debounce!\");\r\n            clearRipples();\r\n        }, 3000)\r\n        , []);\r\n\r\n    const rippleContainerRef = useRef(null);\r\n\r\n    function addRipple(e) {\r\n        const button = e.currentTarget;\r\n        const pos = button.getBoundingClientRect();\r\n        const circle = document.createElement('span');\r\n        const radius = Math.max(button.clientWidth, button.clientHeight) / 2;\r\n\r\n        circle.style.width = circle.style.height = `${2 * radius}px`;\r\n        circle.style.left = `${e.clientX - pos.left - radius}px`;\r\n        circle.style.top = `${e.clientY - pos.top - radius}px`;\r\n        circle.classList.add('ripple');\r\n\r\n        // Add ripple element to ripple container\r\n        rippleContainerRef.current.appendChild(circle);\r\n    }\r\n\r\n    function clearRipples() {\r\n        const container = rippleContainerRef.current;\r\n        while (container.firstChild) {\r\n            container.removeChild(container.firstChild);\r\n        }\r\n    }\r\n    /*\r\n    function createRipple(e) {\r\n        const button = e.currentTarget;\r\n        const pos = button.getBoundingClientRect();\r\n        const circle = document.createElement('span');\r\n        const radius = Math.max(button.clientWidth, button.clientHeight) / 2;\r\n\r\n        circle.style.width = circle.style.height = `${2 * radius}px`;\r\n        circle.style.left = `${e.clientX - pos.left - radius}px`;\r\n        circle.style.top = `${e.clientY - pos.top - radius}px`;\r\n        circle.classList.add('ripple');\r\n\r\n        // Remove ripple element if already on button\r\n        const ripple = button.getElementsByClassName('ripple')[0];\r\n        if (ripple) {\r\n            ripple.remove();\r\n        }\r\n\r\n        // Add ripple element to button\r\n        button.appendChild(circle);\r\n        rippleContainerRef.current.appendChild(circle);\r\n    }\r\n    */\r\n    function handleClick(e) {\r\n        //createRipple(e);\r\n        addRipple(e);\r\n        props.onClick();\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"button-ripple\"\r\n            type=\"button\"\r\n            onClick={handleClick}\r\n            onMouseUp={debouncedLog}\r\n        >\r\n            {props.children}\r\n            <div\r\n                className=\"ripple-container\"\r\n                ref={rippleContainerRef}\r\n            ></div>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ButtonRipple;","import React, { useState } from 'react';\r\nimport './CustomStrumPattern.css';\r\nimport StrumPattern from '../StrumPattern.js';\r\nimport ButtonRipple from './ButtonRipple';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Strum(props) {\r\n    return (\r\n        <div className=\"custom-strum-container\">\r\n            <div className=\"lock-icon-container\" onClick={props.lockedOnClick}>\r\n                <FontAwesomeIcon\r\n                    icon={props.locked ? faLock : faLockOpen}\r\n                    style={props.locked ? { color: \"red\" } : { color: \"gray\" }}\r\n                />\r\n            </div>\r\n            <hr/>\r\n            <div className=\"strum-container\" onClick={props.strumOnClick}>\r\n                <div className=\"strum-num\">\r\n                    {StrumPattern.getStrumValue(props.strumNum)}\r\n                </div>\r\n                <div className=\"strum-direction\">\r\n                    {StrumPattern.getStrumDirection(props.strumNum, props.selected)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction CustomStrumPattern(props) {\r\n    // Ex. D Du u D = [true, false, true, true, false, true, true, false]\r\n    const [currentStrumPattern, setCurrentStrumPattern] = useState(props.strummingPattern);\r\n    const [lockedStrums, setLockedStrums] = useState(new Array(8).fill(false));\r\n\r\n    function toggleStrum(i) {\r\n        const newStrumPatternBoolArr = currentStrumPattern.strums.slice();\r\n        newStrumPatternBoolArr[i] = !newStrumPatternBoolArr[i];\r\n        setCurrentStrumPattern(new StrumPattern(newStrumPatternBoolArr));\r\n    }\r\n\r\n    function toggleLockedStrum(i) {\r\n        const newLockedStrums = lockedStrums.slice();\r\n        newLockedStrums[i] = !newLockedStrums[i];\r\n        setLockedStrums(newLockedStrums);\r\n    }\r\n\r\n    /* Randomizes strumming pattern while keeping selected strums the same.*/\r\n    function randomize() {\r\n        const newStrumPatternBoolArr = currentStrumPattern.strums\r\n            .map((strum, i) => {\r\n                if (!lockedStrums[i]) {\r\n                    return Boolean(Math.random() < 0.5);\r\n                }\r\n                return strum;\r\n            });\r\n        setCurrentStrumPattern(new StrumPattern(newStrumPatternBoolArr));\r\n    }\r\n\r\n    function reset() {\r\n        setCurrentStrumPattern(new StrumPattern(new Array(8).fill(true)));\r\n        setLockedStrums(new Array(8).fill(false));\r\n    }\r\n\r\n    const strumList = currentStrumPattern.strums.map((strumBool, i) => {\r\n        return (\r\n            <Strum\r\n                strumNum={i}\r\n                selected={strumBool}\r\n                locked={lockedStrums[i]}\r\n                lockedOnClick={() => toggleLockedStrum(i)}\r\n                strumOnClick={() => toggleStrum(i)}\r\n                key={i}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"custom-strumming-pattern-component\">\r\n            <div className=\"strumming-pattern-container\">\r\n                <div className=\"strumming-pattern\">{strumList}</div>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <ButtonRipple onClick={randomize}>Randomize</ButtonRipple>\r\n                <ButtonRipple onClick={() => props.saveStrumPattern(currentStrumPattern)}>Save</ButtonRipple>\r\n                <ButtonRipple onClick={reset}>Reset</ButtonRipple>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomStrumPattern;","import React from 'react';\r\nimport StrumPattern from '../StrumPattern.js';\r\nimport './SavedStrumPattern.css';\r\n\r\nfunction SavedStrum(props) {\r\n    return (\r\n        <div className=\"custom-strum-container\">\r\n            <div className=\"strum-num\">\r\n                {StrumPattern.getStrumValue(props.strumNum)}\r\n            </div>\r\n            <div className=\"strum-direction\">\r\n                {StrumPattern.getStrumDirection(props.strumNum, props.selected)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction SavedStrumPattern(props) {\r\n    const strumList = props.strumPattern.strums.map((strumBool, i) => {\r\n        return (\r\n            <SavedStrum\r\n                strumNum={i}\r\n                selected={strumBool}\r\n                key={i}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"saved-strumming-pattern-container\">\r\n            <div className=\"strumming-pattern\">{strumList}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SavedStrumPattern;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronUp, faChevronDown, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport SavedStrumPattern from './SavedStrumPattern';\r\nimport './SavedStrumPatternListElement.css';\r\n\r\nfunction SavedStrumPatternListElement(props) {\r\n    return (\r\n        <section className=\"saved-strum-pattern-list-element-container\">\r\n            <div className=\"flex-container\">\r\n                <div className=\"saved-strum-pattern-list-element-button-container\">\r\n                    <button\r\n                        //data-html2canvas-ignore\r\n                        onClick={() => props.moveListIndexFunc(props.listIndex, props.listIndex - 1)}\r\n                        aria-label={`Move list item ${props.listIndex} up`}\r\n                        className=\"button-ripple\"\r\n                        type=\"button\"\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            icon={faChevronUp}\r\n                        />\r\n                    </button>\r\n                    <div className=\"saved-strum-pattern-list-element-index\">\r\n                        {props.listIndex + 1}\r\n                    </div>\r\n                    <button\r\n                        //data-html2canvas-ignore\r\n                        onClick={() => props.moveListIndexFunc(props.listIndex, props.listIndex + 1)}\r\n                        aria-label={`Move list item ${props.listIndex} down`}\r\n                        className=\"button-ripple\"\r\n                        type=\"button\"\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            icon={faChevronDown}\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <SavedStrumPattern\r\n                    strumPattern={props.strumPattern}\r\n                />\r\n                <button\r\n                    data-html2canvas-ignore\r\n                    onClick={() => props.removeListIndexFunc(props.listIndex)}\r\n                    aria-label={`Remove list item ${props.listIndex}`}\r\n                    className=\"button-ripple\"\r\n                    type=\"button\"\r\n                >\r\n                    <FontAwesomeIcon\r\n                        icon={faTrashAlt}\r\n                    />\r\n                </button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default SavedStrumPatternListElement;","import React from 'react';\r\nimport SavedStrumPatternListElement from './SavedStrumPatternListElement';\r\nimport './SavedStrumPatternList.css';\r\nimport ButtonRipple from './ButtonRipple';\r\nimport html2pdf from 'html2pdf.js';\r\n/**\r\n * @param {Object} props\r\n * props = {\r\n *     savedStrumList: {StrumPattern[]}\r\n * }\r\n */\r\nfunction SavedStrumPatternList(props) {\r\n    const strumPatternList = props.savedStrumList.map((strumPattern, i) => {\r\n        return (\r\n            <li key={i}>\r\n                <SavedStrumPatternListElement\r\n                    strumPattern={strumPattern}\r\n                    listIndex={i}\r\n                    moveListIndexFunc={props.moveListIndexFunc}\r\n                    removeListIndexFunc={props.removeListIndexFunc}\r\n                />\r\n            </li>\r\n        );\r\n    });\r\n\r\n    function onClone(cloneDoc) {\r\n        let buttonNodes = cloneDoc.getElementsByTagName('button');\r\n        for (let button of buttonNodes) {\r\n            button.style.visibility = 'hidden';\r\n        }\r\n    }\r\n\r\n    function saveListAsPDF() {\r\n        const element = document.getElementById('saved-strumming-pattern-list');\r\n        const opt = {\r\n            margin: [10, 40, 10, 0],\r\n            //margin: 1,\r\n            filename: 'Saved Strumming Patterns.pdf',\r\n            html2canvas: {\r\n                onclone: onClone,\r\n                scale: 2,\r\n                scrollX: 0,\r\n                scrollY: 0,\r\n                width: 596\r\n            },\r\n            jsPDF: {\r\n                format: 'letter',\r\n                //format: [element.clientWidth, element.clientHeight],\r\n            },\r\n        };\r\n        // New Promise-based usage\r\n        html2pdf().set(opt).from(element).save();\r\n        // Old monolithic-style usage\r\n        //html2pdf(element, opt);\r\n    }\r\n\r\n    return (\r\n        <div className=\"saved-list-container\">\r\n            <h2>Saved Strumming Patterns</h2>\r\n            <ButtonRipple onClick={props.clearListFunc}>Clear List</ButtonRipple>\r\n            <ButtonRipple onClick={saveListAsPDF}>Save as PDF</ButtonRipple>\r\n            <ol\r\n                id=\"saved-strumming-pattern-list\"\r\n                className=\"saved-strumming-pattern-list-container\"\r\n            >\r\n                {strumPatternList}\r\n            </ol>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SavedStrumPatternList;","import React from 'react';\r\nimport './FooterCustom.css';\r\n\r\nfunction FooterCustom() {\r\n    function getCopyrightString() {\r\n        const currentYear = new Date().getFullYear();\r\n        return currentYear === 2020\r\n            ? 2020\r\n            : `2020-${currentYear}`;\r\n    }\r\n\r\n    return (\r\n        <footer className=\"App-footer\">\r\n            <p>\r\n                <small>\r\n                    Source Code &copy; <time id=\"copyright-current-year\">{getCopyrightString()}</time> Todd Brentlinger, Santa Cruz, CA, USA. All Rights Reserved.\r\n            </small>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default FooterCustom;","import React, { useState } from 'react';\r\n//import logo from './logo.svg';\r\nimport logo from './justin-guitar-header-logo.png';\r\nimport './App.css';\r\n\r\nimport StrumPattern from './StrumPattern';\r\nimport CustomStrumPattern from './components/CustomStrumPattern';\r\nimport SavedStrumPatternList from './components/SavedStrumPatternList';\r\n\r\nimport FooterCustom from './components/FooterCustom';\r\n\r\nfunction App(props) {\r\n    const [savedStrumList, setSavedStrumList] = useState(props.savedStrumList);\r\n\r\n    /**\r\n     * Saves strumming pattern to list after checking if NOT already in saved list.\r\n     * @param {StrumPattern} strumPattern\r\n     */\r\n    function saveStrumPattern(strumPattern) {\r\n        // If strumPattern is already in saved list, return with message\r\n        let index = -1;\r\n        for (let i = 0; i < savedStrumList.length; i++) {\r\n            if (StrumPattern.isEqual(savedStrumList[i], strumPattern)) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index !== -1) {\r\n            return window.alert(`Strum pattern already in Saved List at number: ${++index}`);\r\n        }\r\n\r\n        // Save strumPattern to saved list\r\n        let newSavedStrumList = savedStrumList.slice();\r\n        newSavedStrumList.push(strumPattern);\r\n        setSavedStrumList(newSavedStrumList);\r\n    }\r\n\r\n    function clearSavedStrumList() {\r\n        // If list is already empty, return\r\n        if (!savedStrumList.length)\r\n            return;\r\n\r\n        // Open message box asking User, \"Are you sure? Y/N\"\r\n        if (window.confirm(\"Are you sure you want to clear the saved list of strum patterns?\")) {\r\n            setSavedStrumList([]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves one element from savedStrumList from old index to new index.\r\n     * @param {Number} oldIndex\r\n     * @param {Number} newIndex\r\n     */\r\n    function moveSaveStrumListIndex(oldIndex, newIndex) {\r\n        /* TODO:\r\n         * Check indices and compare to array length\r\n         * EX. If parameters (0, -1):\r\n         *     move first element to last element\r\n         * EX. If paramters (arr.length, arr.length+1):\r\n         *     move last element to first element\r\n         */\r\n\r\n        // Return if oldIndex is equal to or greater than saved list length\r\n        if (oldIndex >= savedStrumList.length) {\r\n            return;\r\n        }\r\n        // Account for newIndex equal to or greater than saved list length\r\n        while (newIndex >= savedStrumList.length) {\r\n            newIndex -= savedStrumList.length;\r\n        }\r\n\r\n        // Account for negative indices\r\n        while (oldIndex < 0) {\r\n            oldIndex += savedStrumList.length;\r\n        }\r\n        while (newIndex < 0) {\r\n            newIndex += savedStrumList.length;\r\n        }\r\n\r\n        let newArr = savedStrumList.slice();\r\n        newArr.splice(newIndex, 0, newArr.splice(oldIndex, 1)[0]);\r\n        setSavedStrumList(newArr);\r\n    }\r\n\r\n    /**\r\n     * Removes provided index from savedStrumList.\r\n     * @param {Number} indexToRemove\r\n     */\r\n    function removeSavedStrumListIndex(indexToRemove) {\r\n        // Check index and compare to array length\r\n\r\n        let newArr = savedStrumList.slice();\r\n        newArr.splice(indexToRemove, 1);\r\n        setSavedStrumList(newArr);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <div className=\"logo-container\">\r\n                    <a href=\"https://www.justinguitar.com\">\r\n                        <img src={logo} alt=\"Justin Guitar logo\" width=\"400\" height=\"106\" />\r\n                    </a>\r\n                </div>\r\n            </header>\r\n            <main>\r\n                <h1>Guitar Strumming Pattern Randomizer</h1>\r\n                <CustomStrumPattern\r\n                    strummingPattern={new StrumPattern([true, false, true, true, false, true, true, false])}\r\n                    saveStrumPattern={saveStrumPattern}\r\n                />\r\n                <SavedStrumPatternList\r\n                    savedStrumList={savedStrumList}\r\n                    clearListFunc={clearSavedStrumList}\r\n                    moveListIndexFunc={moveSaveStrumListIndex}\r\n                    removeListIndexFunc={removeSavedStrumListIndex}\r\n                />\r\n            </main>\r\n            <FooterCustom />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport StrumPattern from './StrumPattern';\n\n// Check localStorage for saved strum pattern list\nconst SAVED_STRUM_PATTERN_LIST = [\n    new StrumPattern([true, false, true, true, false, true, true, false]),\n    new StrumPattern([true, false, true, false, true, true, true, false]),\n    new StrumPattern([true, false, true, false, true, false, true, false]),\n];\n\nReactDOM.render(\n    <React.StrictMode>\n        <App savedStrumList={SAVED_STRUM_PATTERN_LIST} />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}